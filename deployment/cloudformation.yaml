AWSTemplateFormatVersion: '2010-09-09'
Description: 'Y Image Sharing App Infrastructure'

Parameters:
  BucketName:
    Type: String
    Default: y-image-sharing-app-697508244701
    Description: Name of the S3 bucket for image storage

  AwsRegion:
    Type: String
    Default: eu-west-1
    Description: AWS region

Resources:
  # S3 bucket for image storage
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      LifecycleConfiguration:
        Rules:
          - Id: ExpireImages
            Status: Enabled
            ExpirationInDays: 7
            Prefix: images/
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            ExposedHeaders: [ETag]
            MaxAge: 3000

  # ECS Cluster
  AppCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: y-image-sharing-cluster

  # ECS Task Execution Role
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: y-image-sharing-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # ECS Task Role
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: y-image-sharing-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # S3 access policy for ECS Task Role
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: y-image-sharing-s3-access-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !GetAtt ImageBucket.Arn
              - !Sub ${ImageBucket.Arn}/*
      Roles:
        - !Ref EcsTaskRole

  # VPC for ECS
  AppVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: y-image-sharing-vpc

  # Public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub ${AwsRegion}a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: y-image-sharing-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVpc
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Sub ${AwsRegion}b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: y-image-sharing-public-subnet-2

  # Internet Gateway
  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: y-image-sharing-igw

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AppVpc
      InternetGatewayId: !Ref AppInternetGateway

  # Route table for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVpc
      Tags:
        - Key: Name
          Value: y-image-sharing-public-route-table

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AppInternetGateway

  # Associate route table with public subnets
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for ECS tasks
  EcsTasksSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: y-image-sharing-ecs-tasks-sg
      GroupDescription: Allow inbound traffic to ECS tasks
      VpcId: !Ref AppVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: y-image-sharing-ecs-tasks-sg

  # ECR Repository for backend
  BackendEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: y-image-sharing-backend
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true

  # ECR Repository for frontend
  FrontendEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: y-image-sharing-frontend
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true

  # CloudWatch Log Group for ECS
  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/y-image-sharing
      RetentionInDays: 30

  # ECS Task Definition for backend
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: y-image-sharing-backend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AwsRegion}.amazonaws.com/y-image-sharing-backend:latest
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: '8000'
            - Name: AWS_REGION
              Value: !Ref AwsRegion
            - Name: AWS_S3_BUCKET
              Value: !Ref BucketName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsLogGroup
              awslogs-region: !Ref AwsRegion
              awslogs-stream-prefix: backend

  # ECS Service for backend
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: PublicRoute
    Properties:
      ServiceName: y-image-sharing-backend
      Cluster: !Ref AppCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref EcsTasksSecurityGroup
          AssignPublicIp: ENABLED

Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref ImageBucket

  BucketArn:
    Description: ARN of the S3 bucket
    Value: !GetAtt ImageBucket.Arn

  BackendEcrRepositoryUrl:
    Description: URL of the ECR repository for the backend
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AwsRegion}.amazonaws.com/${BackendEcrRepository}

  FrontendEcrRepositoryUrl:
    Description: URL of the ECR repository for the frontend
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AwsRegion}.amazonaws.com/${FrontendEcrRepository}

  EcsClusterName:
    Description: Name of the ECS cluster
    Value: !Ref AppCluster

  BackendServiceName:
    Description: Name of the ECS service for the backend
    Value: !Ref BackendService

  VpcId:
    Description: ID of the VPC
    Value: !Ref AppVpc

  PublicSubnetIds:
    Description: IDs of the public subnets
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  SecurityGroupId:
    Description: ID of the security group for ECS tasks
    Value: !Ref EcsTasksSecurityGroup
